<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Luke Avedon</title>
    <link>http://lavedon.github.io/posts/</link>
    <description>Recent content in Posts on Luke Avedon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Aug 2022 15:57:49 -0400</lastBuildDate><atom:link href="http://lavedon.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My Terrible Blazor WASM App</title>
      <link>http://lavedon.github.io/2022/08/my-terrible-blazor-wasm-app/</link>
      <pubDate>Sun, 14 Aug 2022 15:57:49 -0400</pubDate>
      
      <guid>http://lavedon.github.io/2022/08/my-terrible-blazor-wasm-app/</guid>
      <description>Check it out: ![[https://lukebug.com]]</description>
    </item>
    
    <item>
      <title>Fun Porting a Console App to Mac OSX</title>
      <link>http://lavedon.github.io/2022/08/fun-porting-a-console-app-to-mac-osx/</link>
      <pubDate>Sat, 13 Aug 2022 17:30:55 -0400</pubDate>
      
      <guid>http://lavedon.github.io/2022/08/fun-porting-a-console-app-to-mac-osx/</guid>
      <description>All I wanted to do was give my console app to a non-technical user.
I had made a command line based app for a college student. It hooked up to a new, not fully released API from the Oxford dictionary. The API, Oxford Researcher, was only available to universities at the time. You type in a word with all sorts of options. The application than spits back information like what regions of the world the word came from, quotes based on the first usage of the word.</description>
    </item>
    
    <item>
      <title>10 Quick Steps to Debug AngularJs in Console</title>
      <link>http://lavedon.github.io/2022/08/10-quick-steps-to-debug-angularjs-in-console/</link>
      <pubDate>Sat, 13 Aug 2022 17:16:37 -0400</pubDate>
      
      <guid>http://lavedon.github.io/2022/08/10-quick-steps-to-debug-angularjs-in-console/</guid>
      <description>If you are debugging a legacy AngularJS app, and want to be able to noodle around the DOM and debug all those scopes ($scope) without installing an old AngularJS Chrome extensions (like Ng-Inspect) &amp;ndash; you can do it in the browser console.
Here is a condensed cheat sheet to get you started:
Make sure JQuery is being used and currently loaded.
If you type $() into the browser console, without error, JQuery is there.</description>
    </item>
    
    <item>
      <title>Simple Order By Condition</title>
      <link>http://lavedon.github.io/2022/08/simple-order-by-condition/</link>
      <pubDate>Sat, 13 Aug 2022 15:31:21 -0400</pubDate>
      
      <guid>http://lavedon.github.io/2022/08/simple-order-by-condition/</guid>
      <description>Sometimes when the user wants to sort results in a view, it makes sense to do all of that sorting back in the database. The C# controller passes what column to sort by and what direction to sort by to the SQL Sever stored procedure, when it executes the command with ADO.NET.
Conditional sorting is easy to do in modern versions of SQL Server.
However, I have seen these sorts performed by PARTITION BY or ROW_NUMBER and other windowing functions.</description>
    </item>
    
    <item>
      <title>Helpful Sql Snippets for Investigating a New Project</title>
      <link>http://lavedon.github.io/2022/08/helpful-sql-snippets-for-investigating-a-new-project/</link>
      <pubDate>Sat, 13 Aug 2022 10:43:03 -0400</pubDate>
      
      <guid>http://lavedon.github.io/2022/08/helpful-sql-snippets-for-investigating-a-new-project/</guid>
      <description>When assigned a new full stack task on a new project, I usually have no clue what table or even what database holds the data I am tasked to work with.
But where is the data the user is asking for? If you the database is not clearly listed, these snippets have helped me find what I need.
First before I do anything crazy like search the entire database for a value, I will search the database for a column with a relevant name.</description>
    </item>
    
    <item>
      <title>Simple ADO.NET Logging with Reflection</title>
      <link>http://lavedon.github.io/2022/08/simple-adonet-logging-with-reflection/</link>
      <pubDate>Fri, 12 Aug 2022 23:08:58 -0400</pubDate>
      
      <guid>http://lavedon.github.io/2022/08/simple-adonet-logging-with-reflection/</guid>
      <description>I made this simple logger.
I found this snippet of code to be an ideal way to watch what SQL an ADO.NET application sends over to SQL Server. This code displays what stored procedures are being called, what the name of those procedures are, and what parameters are being passed (with what values), etc. It is a fast way to see everything going across the database connection in the Visual Studio output window.</description>
    </item>
    
    <item>
      <title>Leetcode 20: Valid Parentheses</title>
      <link>http://lavedon.github.io/2022/08/leetcode-20-valid-parentheses/</link>
      <pubDate>Mon, 08 Aug 2022 18:46:41 -0400</pubDate>
      
      <guid>http://lavedon.github.io/2022/08/leetcode-20-valid-parentheses/</guid>
      <description>Leetcode 20: Valid Parentheses is a great problem.
It is a perfect introduction to using a &amp;lsquo;stack.&amp;rsquo;.
The goal is to be able to check that a string has matching opening and closing parenthesis, either parenthesis &amp;ldquo;(&amp;rdquo;, brackets &amp;ldquo;{&amp;rdquo;, or squares (square brackets?) &amp;ldquo;[&amp;rdquo;. i.e. &amp;ldquo;(){}[]&amp;rdquo; Is valid. &amp;ldquo;(]&amp;rdquo; is not valid as these two open and close brackets are not of the same type. &amp;ldquo;(&amp;rdquo; is matched by &amp;ldquo;)&amp;rdquo; and not &amp;ldquo;]&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Getting Started with EF Core: Part 2</title>
      <link>http://lavedon.github.io/2022/08/getting-started-with-ef-core-part-2/</link>
      <pubDate>Sat, 06 Aug 2022 18:12:10 -0400</pubDate>
      
      <guid>http://lavedon.github.io/2022/08/getting-started-with-ef-core-part-2/</guid>
      <description>https://www.youtube.com/watch?v=oSoS4ifjubo</description>
    </item>
    
    <item>
      <title>Getting Started with EF Core: Part 1</title>
      <link>http://lavedon.github.io/2022/08/getting-started-with-ef-core-part-1/</link>
      <pubDate>Sat, 06 Aug 2022 18:06:47 -0400</pubDate>
      
      <guid>http://lavedon.github.io/2022/08/getting-started-with-ef-core-part-1/</guid>
      <description>https://www.youtube.com/watch?v=B_W3JqdmPCw</description>
    </item>
    
    <item>
      <title>Introduction to Classic Sorting Algorithms: Part 1 - Bubble Sort</title>
      <link>http://lavedon.github.io/2022/07/introduction-to-classic-sorting-algorithms-part-1-bubble-sort/</link>
      <pubDate>Thu, 07 Jul 2022 21:31:38 -0400</pubDate>
      
      <guid>http://lavedon.github.io/2022/07/introduction-to-classic-sorting-algorithms-part-1-bubble-sort/</guid>
      <description>Let&amp;rsquo;s start with the simplest sort of them all: Bubble Sort.
Bubble sort simply loops through an array. If it finds that one value is larger than the value next to it &amp;ndash; that value &amp;lsquo;bubbles&amp;rsquo; up and up and up until it finally reaches a smaller value. Then the next value bubbles up and does the exact same thing. On and on and on. Bubble Sort is not an efficient algorithm &amp;ndash; each value is usually compared to all other values.</description>
    </item>
    
  </channel>
</rss>
